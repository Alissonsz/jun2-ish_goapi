// Code generated by mockery v2.36.1. DO NOT EDIT.

package room

import (
	models "github.com/alissonsz/jun2-ish_goapi/server/models"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryMock is an autogenerated mock type for the repository type
type RepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: room
func (_m *RepositoryMock) Create(room *models.Room) (*int64, error) {
	ret := _m.Called(room)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Room) (*int64, error)); ok {
		return rf(room)
	}
	if rf, ok := ret.Get(0).(func(*models.Room) *int64); ok {
		r0 = rf(room)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Room) error); ok {
		r1 = rf(room)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryMock creates a new instance of RepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryMock {
	mock := &RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
